
#env\Scripts\activate.bat

# **** Hast Table *****

#In Python, the Dictionary data types represent the implementation of hash tables. The Keys in the dictionary satisfy the following requirements:
#The keys of the dictionary are hashable i.e. the are generated by hashing function which generates unique result for each unique value supplied to the hash function.
#The order of data elements in a dictionary is not fixed.

dic = {'llave1':'valor1', 'llave2':'valor1'}

dic['llave3'] = 'valor3'

print(dic)
for i in dic.keys():
	print(i)

for i in dic.values():
	print(i)

for i in dic.items():
	print(i)

print(dic.get('llave1'))


# ****Garbage collector *****




# *** deepcopy vs copy *** 

import copy

l1 = [[1,2,3], [4,5,6], [7,8,9]]

l2 = l1

l2[0][0] = 10

print("l1 = ", l1, "l2 = ", l2)
print("id l1 = ", id(l1), "id l2 = ", id(l2))

l1 = [[1,2,3], [4,5,6], [7,8,9]]

# copy
l1 = [[1,2,3], [4,5,6], [7,8,9]]
l2 = copy.copy(l1)
l2[0] = [-1,-2,-3]

print("l1 = ", l1, "l2 = ", l2)
print("id l1 = ", id(l1), "id l2 = ", id(l2))

l1 = [[1,2,3], [4,5,6], [7,8,9]]
l2 = copy.copy(l1)
l2[0][2] = -3
print("l1 = ", l1, "l2 = ", l2)
print("id l1 = ", id(l1), "id l2 = ", id(l2))
#copy creates a copy of the object but still references each element

l1 = [[1,2,3], [4,5,6], [7,8,9]]
l2= copy.deepcopy(l1)
l2[0][2] = -3
print("l1 = ", l1, "l2 = ", l2)
print("id l1 = ", id(l1), "id l2 = ", id(l2))

# OOP in python

class Clase:
	def testing(seft):
		if seft.score>10:
			return True
		else:
			return False

	def __init__(self, name, score):
		self.name = name
		self.score = score


objeto1 = Clase("name1", 11)

print(objeto1.name)
print(objeto1.score)
print(objeto1.testing())


class Complex:

	def add(self, value):
		self.real += value
		self.img += value

	def __init__(self, real, img):
		self.real = real
		self.img = img

n1 = Complex(10,10)
n2 = Complex(1,1)

n1.add(5)
n2.add(5)

print(n1.real)
print(n2.real)

# Inheritance in Python
class Vehicle:
	def same_name_method(self):
		print("This method is v")

	def vehicle_method(self):
		print("This method is Vehicle")

	def __init__(self, p1, p2):
		self.p1 = p1
		self.p2 = p2

class Motorbike(Vehicle):
	def same_name_method(self):
		print("This method is m")

		Vehicle.same_name_method(self)

	def motor_method(self):
		print("This method is Motorbike")

class Car(Vehicle):
	def same_name_method(self):
		print("This method is c")

	def car_method(self):
		print("This method is Car")



moto = Motorbike(10,11)
moto.vehicle_method()
moto.motor_method()
moto.same_name_method()

carro = Car(10,11)
carro.vehicle_method()
carro.car_method()
carro.same_name_method()